upstream app_a {
    server app_1:80;
}
 
upstream app_b {
    server app_2:80;
}
 
server {
       listen   3002;
       root     /opt/nginx/html;
       resolver 127.0.0.11  valid=1s    ipv6=off;
       
       access_by_lua '
         local opts = {
           redirect_uri_path = "/redirect_uri",
           accept_none_alg = true,
           discovery = "https://localhost:8443/realms/demo/.well-known/openid-configuration",
           client_id = "nginx1",
           client_secret = "IhkKSFiN00GZf6JAzCJieuA1wk40l4T5",
           redirect_uri_scheme = "http",
           logout_path = "/logout",
           redirect_after_logout_uri = "https://localhost:8443/realms/demo/protocol/openid-connect/logout?redirect_uri=http://localhost:3002/",
           redirect_after_logout_with_id_token_hint = false,
           session_contents = {id_token=true}
         }
         -- call introspect for OAuth 2.0 Bearer Access Token validation
         local res, err = require("resty.openidc").authenticate(opts)
         if err then
           ngx.status = 403
           ngx.say(err)
           ngx.exit(ngx.HTTP_FORBIDDEN)
         end
      ';
 
      # I disabled caching so the browser won't cache the site.
      expires           0;
      add_header        Cache-Control private;    
 
      location / {
          proxy_pass      http://app_a;
          proxy_set_header    X-Forwarded-For         $remote_addr;
      }   
      # https://stackoverflow.com/questions/32991000/lua-nginx-ssl-certificate-setup
      lua_ssl_verify_depth 2;
      lua_ssl_trusted_certificate /certs/cert.pem;
      
      # redirect server error pages to the static page /40x.html
      #
      error_page 404 /404.html;
          location = /40x.html {
      }
 
      # redirect server error pages to the static page /50x.html
      # 
      error_page 500 502 503 504 /50x.html;
          location = /50x.html {
            root /usr/share/nginx/html;
      }
}
 
server {
       listen   4090;
       root     /opt/nginx/html;
       resolver 127.0.0.11  valid=1s    ipv6=off;
       
       access_by_lua '
        local opts = {
           redirect_uri_path = "/redirect_uri",
           accept_none_alg = true,
           discovery = "https://localhost:8443/realms/demo/.well-known/openid-configuration",
           client_id = "nginx2",
           client_secret = "b3cvTJ4WbXKlhB76BLF4UfbScXf8UnQB",
           redirect_uri_scheme = "http",
           logout_path = "/logout",
           redirect_after_logout_uri = "https://localhost:8443/realms/demo/protocol/openid-connect/logout?redirect_uri=http://localhost:4090/",
           redirect_after_logout_with_id_token_hint = false,
           session_contents = {id_token=true}
         }
         -- call introspect for OAuth 2.0 Bearer Access Token validation
         local res, err = require("resty.openidc").authenticate(opts)
         if err then
           ngx.status = 403
           ngx.say(err)
           ngx.exit(ngx.HTTP_FORBIDDEN)
         end
      ';
 
      # I disabled caching so the browser won't cache the site.
      expires           0;
      add_header        Cache-Control private;
      
      location / {
          proxy_pass    http://app_b;
          proxy_set_header    X-Forwarded-For         $remote_addr;
      }
      
      # redirect server error pages to the static page /40x.html
      #
      error_page 404 /404.html;
          location = /40x.html {
      }
 
      # redirect server error pages to the static page /50x.html
      #
      error_page 500 502 503 504 /50x.html;
          location = /50x.html {
            root /usr/share/nginx/html;
      }
}